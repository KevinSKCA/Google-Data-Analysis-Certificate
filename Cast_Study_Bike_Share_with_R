---
title: "Cast Study 1"
author: "Kevin"
date: "1/12/2022"
output:
  word_document: default
  html_document: default
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

## Install relevant packages
```{r}
library(tidyverse)
library(lubridate)
library(ggplot2)
```

# Step 1: Collect Data

I sets my working directory to simplify calls to data

```{r}
setwd("C:/Users/xkw19/Documents/Case Study")
```

Upload Divvy datasets (csv files) here

```{r}
q1_2019 <- read.csv(file = "Divvy_Trips_2019_Q1.csv")
q2_2019 <- read.csv(file = "Divvy_Trips_2019_Q2.csv")
q3_2019 <- read.csv(file = "Divvy_Trips_2019_Q3.csv")
q4_2019 <- read.csv(file = "Divvy_Trips_2019_Q4.csv")
```

# Step 2: Wrangling Data

view columm names

```{r}
colnames(q3_2019)
colnames(q4_2019)
colnames(q2_2019)
colnames(q1_2019)
```

Rename column names

```{r}
(q1_2019 <- rename(q1_2019
                   ,ride_id = "trip_id"
                   ,rideable_type = "bikeid" 
                   ,started_at = "start_time"  
                   ,ended_at = "end_time"  
                   ,start_station_name = "from_station_name" 
                   ,start_station_id = "from_station_id"
                   ,end_station_name = "to_station_name" 
                   ,end_station_id = "to_station_id"
                   ,member_casual = "usertype"))
(q2_2019 <- rename(q2_2019
                   ,ride_id = "X01...Rental.Details.Rental.ID"
                   ,rideable_type = "X01...Rental.Details.Bike.ID" 
                   ,started_at = "X01...Rental.Details.Local.Start.Time"  
                   ,ended_at = "X01...Rental.Details.Local.End.Time"  
                   ,start_station_name = "X03...Rental.Start.Station.Name" 
                   ,start_station_id = "X03...Rental.Start.Station.ID"
                   ,end_station_name = "X02...Rental.End.Station.Name" 
                   ,end_station_id = "X02...Rental.End.Station.ID"
                   ,member_casual = "User.Type"
                   ,gender = "Member.Gender"
                   ,birthyear = "X05...Member.Details.Member.Birthday.Year"))
(q3_2019 <- rename(q3_2019
                   ,ride_id = "trip_id"
                   ,rideable_type = "bikeid" 
                   ,started_at = "start_time"  
                   ,ended_at = "end_time"  
                   ,start_station_name = "from_station_name" 
                   ,start_station_id = "from_station_id"
                   ,end_station_name = "to_station_name" 
                   ,end_station_id = "to_station_id"
                   ,member_casual = "usertype"))
(q4_2019 <- rename(q4_2019
                   ,ride_id = "trip_id"
                   ,rideable_type = "bikeid" 
                   ,started_at = "start_time"  
                   ,ended_at = "end_time"  
                   ,start_station_name = "from_station_name" 
                   ,start_station_id = "from_station_id"
                   ,end_station_name = "to_station_name" 
                   ,end_station_id = "to_station_id"
                   ,member_casual = "usertype"))

```

## Inspect the dataframes and look for incongruencies
```{r}
str(q4_2019)
str(q3_2019)
str(q2_2019)
str(q1_2019)
```

## Convert ride_id and rideable_type to character so that they can stack correctly
```{r}
q4_2019 <-  mutate(q4_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q3_2019 <-  mutate(q3_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 
q2_2019 <-  mutate(q2_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type))
q1_2019 <-  mutate(q1_2019, ride_id = as.character(ride_id)
                   ,rideable_type = as.character(rideable_type)) 

```
## Stack individual quarter's data frames into one big data frame
```{r}
all_trips <- bind_rows(q1_2019, q2_2019, q3_2019, q4_2019)
```
## Remove lat, long, birthyear, and gender fields as this data was dropped beginning in 2020

```{r}
all_trips <- all_trips %>%  
  select(-c("X01...Rental.Details.Duration.In.Seconds.Uncapped"))
```

# STEP 3: CLEAN UP AND ADD DATA TO PREPARE FOR ANALYSIS
```{r}
dim(all_trips)
```
# There are a few problems we will need to fix:

(1) In the "member_casual" column, there are two names for members ("member" and "Subscriber") and two names for casual riders ("Customer" and "casual"). We will need to consolidate that from four to two labels.

Calculate durarion between started_at and ended_at columns, set an new column named as "ride_length"


```{r}
q4_2019$ride_length <- difftime(mdy_hms(q4_2019$ended_at),mdy_hms(q4_2019$started_at))
q3_2019$ride_length <- difftime(mdy_hms(q3_2019$ended_at),mdy_hms(q3_2019$started_at))
q2_2019$ride_length <- difftime(mdy_hms(q2_2019$ended_at),mdy_hms(q2_2019$started_at))
q1_2019$ride_length <- difftime(mdy_hm(q1_2019$ended_at),mdy_hm(q1_2019$started_at))
```

```{r}
trip_ridelentgh <- bind_rows(q1_2019, q2_2019, q3_2019, q4_2019)
trip_ridelentgh <- trip_ridelentgh %>%  
  select(-c("X01...Rental.Details.Duration.In.Seconds.Uncapped"))
```

```{r}
trip_ridelentgh <-  trip_ridelentgh %>% 
  mutate(member_casual = recode(member_casual
                           ,"Subscriber" = "member"
                           ,"Customer" = "casual"))
```

```{r}
table(all_trips$member_casual)
```

## Including Plots

You can also embed plots, for example:


Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
